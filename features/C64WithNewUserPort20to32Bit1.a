kBus24Bit_VideoLayer_HasOverscan=1
kBus24Bit_VideoLayer_ExpandedPalettes = 1
kBus24Bit_SpritesMaxNum = 32

!ct pet
!sal
!pdb "target/t.pdb"
!source "C64/stdlib/stdlib.a"
!source "C64/stdlib/LongBranches.a"
!source "C64/stdlib/PETSCII.a"
!source "BombJack/stdlib/Bus24Bit_Macros.a"
!source "BombJack/stdlib/Video_Macros.a"


*=$800
!zn
; The code "start" entry which initialises the stack is not called before this, which is fine for unit testing
; When running on a real C64 the "start" entry initialises the machine properly
start
	sei
	lda #ProcessorPortDefault
	jsr InitialiseMachine
	jsr TestInterface_Passthrough
	jsr Bus20To32Bit1_Init
	; This should re-init any screen if the 32 bit interface is stuck with DMA
	jsr TestInterface_Passthrough
	jsr Bus20To32Bit1_Init
	jsr TestInterface_WriteRAM
	jsr TestInterface_ReadRAM
	jsr TestInterface_ReadRAMWithOffset
.tl1
	inc VIC2BorderColour
	+WaitForFire_A
	inc VIC2BorderColour
	jsr TestInterface_DMATransfer
	inc VIC2BorderColour
;	jmp .tl1
	jsr TestInterface_WriteRAMLong
	+WaitForFire_A
.il1
	+MACROWaitForTheLastScan_A
	inc VIC2BorderColour
	jsr TestInterface_ScrollScreen
	dec VIC2BorderColour
	jsr TestInterface_ScrollScreenInput
	jmp .il1


; If brk is encountered, then display a useful error
.errorMessage
	+MBASICTextPrint .errorMessageText
	; Display the stack
	pla
	jsr DisplayHex_Byte_A
	pla
	jsr DisplayHex_Byte_A
	pla
	jsr DisplayHex_Byte_A
	pla
	jsr DisplayHex_Byte_A
	; Lo then hi of encountered brk address plus a couple of bytes
	pla
	jsr DisplayHex_Byte_A
	pla
	jsr DisplayHex_Byte_A
.il2
	inc VIC2BorderColour
.il3
	inx
	bne .il3
	iny
	bne .il3
	jmp .il2

.errorMessageText
!pet CHR_Red , "** ERROR **" , CHR_Return , 0



TestInterface_Passthrough
	+M_RAMTAS
	+InitKERNALStringDisplay_AXY
	jsr CINT
	+SetDefaultScreenLowerCase_A

	+MWordValueToAddress_A .errorMessage , BRKServiceRoutineLo

	+MBASICTextPrint .bootedC64

	jsr Bus24Bit_Init
	jsr APU_ResetDisable

	jsr HardwareTest_VideoPattern0
	+MBASICTextPrint .testPatternDone

	lda #$cf
	jsr DisplayHex_Byte_A
	lda #CHR_Return
	jsr CHROUT

	jsr Video_WaitVBlank
	+MBASICTextPrint .gotVBlank

	rts

.bootedC64
!pet CHR_White , "C64 Booted" , CHR_Return , 0
.testPatternDone
!pet "HardwareTest VideoPattern0" , CHR_Return , 0
.gotVBlank
!pet "Got VBLank" , CHR_Return , 0

.writeDataComplete
!pet "Write data complete" , CHR_Return , 0

.writeDataLongComplete
!pet "Write data long complete" , CHR_Return , 0

.completeDMA
!pet "DMA complete" , CHR_Return , 0

.readDataComplete
!pet "Read data complete" , CHR_Return , 0

.readDataWithOffsetComplete1
!pet "Read data with offset complete1" , CHR_Return , 0

.readDataWithOffsetComplete2
!pet "Read data with offset complete2" , CHR_Return , 0


.hexTab
!pet "0123456789ABCDEF"

DisplayHex_Byte_A
	pha
	lsr
	lsr
	lsr
	lsr
	tax
	lda .hexTab,x
	jsr CHROUT
	pla
	and #%1111
	tax
	lda .hexTab,x
	jmp CHROUT


TestInterface_WriteRAM
	jsr Bus20To32Bit1_SetLatch6
	
	ldx #0
.l1
	lda TestInterface_Passthrough,x
	+MBus24Bit_Send8BitValueFromA
	inx
	bne .l1
.l12
	lda TestInterface_Passthrough + $100,x
	+MBus24Bit_Send8BitValueFromA
	inx
	bne .l12

	+MBASICTextPrint .writeDataComplete

	rts



TestInterface_WriteRAMLong
	jsr Bus20To32Bit1_ShortReset

	jsr Bus20To32Bit1_SetLatch6

	ldy #0
	ldx #0
.la1
	tya
	+MBus24Bit_Send8BitValueFromA
	txa
	lsr
	lsr
	+MBus24Bit_Send8BitValueFromA
	inx
	bne .la1
	iny
	bne .la1

	+MBASICTextPrint .writeDataLongComplete

	rts



TestInterface_DMATransfer
	jsr Bus20To32Bit1_ShortReset

	jsr Video_WaitVBlank
	jsr Video_WaitVBlank
	jsr Video_StartRasterTimers
	+MBus24Bit_WaitUntilRasterY 128

	
	; jsr Video_SetAddressPalette : This won't work because it uses the 24 bit interface but we cannot twiddle PA2 and also set latch7...
	; Reset the 24 bit interface
	jsr Bus20To32Bit1_SetLatch7
	+MBus24Bit_Send8BitValue kBus20To32Bit1_latch7_ResetDone | kBus20To32Bit1_latch7_PassthroughDisable
	+MBus24Bit_Send8BitValue kBus20To32Bit1_latch7_ResetDone | kBus20To32Bit1_latch7_PassthroughDisable | kBus20To32Bit1_latch7_InternalPA2
	; Set the palette address using the direct byte
	jsr Bus20To32Bit1_SetLatch4
;	+MBus24Bit_SetAddressNoReset_A kBus24Bit_VideoLayer_EBBS , kBus24Bit_VideoLayer_Palette
	+MBus24Bit_SetAddressNoReset_A kBus24Bit_CharScreenMap_EBBS , kBus24Bit_CharScreenMap + (kBus24Bit_CharScreenWidth * 4)

	; Read a couple of bytes from internal RAM and also redirect that to the 24 bit interface
	jsr Bus20To32Bit1_SetLatch7
	+MBus24Bit_Send8BitValue kBus20To32Bit1_latch7_ResetDone | kBus20To32Bit1_latch7_RAM | kBus20To32Bit1_latch7_InternalPA2
	+MBus24Bit_Send8BitValue kBus20To32Bit1_latch7_ResetDone | kBus20To32Bit1_latch7_RAM | kBus20To32Bit1_latch7_InternalPA2
	jsr Bus20To32Bit1_ReadMode
	jsr Bus20To32Bit1_SetLatch5
	+MBus24Bit_Get8BitValueToA
	+MBus24Bit_Get8BitValueToA

	; Setup a DMA
	jsr Bus20To32Bit1_WriteMode
	jsr Bus20To32Bit1_SetLatch11
	+MBus24Bit_Send8BitValue $80
	jsr Bus20To32Bit1_SetLatch12
	+MBus24Bit_Send8BitValue $fe


	jsr Bus20To32Bit1_SetLatch7
	+MBus24Bit_Send8BitValue kBus20To32Bit1_latch7_ResetDone | kBus20To32Bit1_latch7_RAM | kBus20To32Bit1_latch7_InternalPA2 | kBus20To32Bit1_latch7_FastDMAStart

	jsr Bus20To32Bit1_ReadMode
	jsr Bus20To32Bit1_SetLatch13
	
.dmal1
	inc VIC2BorderColour
	+MBus24Bit_Get8BitValueToA
;	bne .dmal1
	
	jsr Bus20To32Bit1_WriteMode
	+MBASICTextPrint .completeDMA

	rts


TestInterface_ReadRAM
	jsr Bus20To32Bit1_ShortReset

	jsr Bus20To32Bit1_ReadMode
	jsr Bus20To32Bit1_SetLatch5

	ldx #0
.l2
	+MBus24Bit_Get8BitValueToA
	cmp TestInterface_Passthrough,x
	beq .ok1
	; This useful, during the unit test it causes a test failure, using a real C64 an error message is displayed
	brk
	;+MDebugBreak
.ok1
	inx
	bne .l2

	jsr Bus20To32Bit1_WriteMode

	+MBASICTextPrint .readDataComplete

	rts



TestInterface_ReadRAMWithOffset
	jsr Bus20To32Bit1_ShortReset

	jsr Bus20To32Bit1_SetLatch8
	+MBus24Bit_Send8BitValue $40
	
	jsr Bus20To32Bit1_ReadMode

	; This should work in read or write mode
	jsr Bus20To32Bit1_SetLatch3
	+MBus24Bit_Get8BitValueToA
	jsr DisplayHex_Byte_A	; Might be interesting to see

	jsr Bus20To32Bit1_SetLatch5
	
	ldx #0
.l2b
	+MBus24Bit_Get8BitValueToA
	cmp TestInterface_Passthrough + $40,x
	beq .ok1b
	; This useful, during the unit test it causes a test failure, using a real C64 an error message is displayed
	brk
	;+MDebugBreak
.ok1b
	inx
	cpx #$20
	bne .l2b
	+MBASICTextPrint .readDataWithOffsetComplete1

	; This should work in read or write mode
	jsr Bus20To32Bit1_SetLatch3
	+MBus24Bit_Get8BitValueToA
	jsr DisplayHex_Byte_A	; Might be interesting to see

	jsr Bus20To32Bit1_SetLatch5

	ldx #0
.l2b2
	+MBus24Bit_Get8BitValueToA
	cmp TestInterface_Passthrough + $40 + $20 + $40,x
	beq .ok1b2
	; This useful, during the unit test it causes a test failure, using a real C64 an error message is displayed
	brk
	;+MDebugBreak
.ok1b2
	inx
	cpx #$20
	bne .l2b2

	+MBASICTextPrint .readDataWithOffsetComplete2

	jsr Bus20To32Bit1_WriteMode

	rts



!zn
.startOffset
	+MLittleEndian24Bit 0

TestInterface_ScrollScreen
	jsr Bus20To32Bit1_ShortReset

	jsr Bus20To32Bit1_SetLatch0
	+MBus24Bit_Send8BitValueFromAddress .startOffset
	jsr Bus20To32Bit1_SetLatch1
	+MBus24Bit_Send8BitValueFromAddress .startOffset + 1
	jsr Bus20To32Bit1_SetLatch2
	+MBus24Bit_Send8BitValueFromAddress .startOffset + 2
	
	; $7b0 = ($400 - 40)*2
	; Giving a 1024 x 1024 virtual screen scroll
	jsr Bus20To32Bit1_SetLatch8
	+MBus24Bit_Send8BitValue $b0
	jsr Bus20To32Bit1_SetLatch9
	+MBus24Bit_Send8BitValue $07
	jsr Bus20To32Bit1_SetLatch10
	+MBus24Bit_Send8BitValue 0
	
	jsr Bus20To32Bit1_ReadMode
	jsr Bus20To32Bit1_SetLatch5
	
!for .y , VIC2ScreenCharsHeight {
!for .x , VIC2ScreenCharsWidth {
	+MBus24Bit_Get8BitValueToA
	sta SCREENRAM + (.x-1) + ((.y-1) * VIC2ScreenCharsWidth)
	+MBus24Bit_Get8BitValueToA
	sta COLOURRAM + (.x-1) + ((.y-1) * VIC2ScreenCharsWidth)
}
	; This should work in read or write mode
	jsr Bus20To32Bit1_SetLatch3
	+MBus24Bit_Get8BitValueToA

	jsr Bus20To32Bit1_SetLatch5
}


	jsr Bus20To32Bit1_WriteMode

	rts

.plus2
	+MLittleEndian24Bit 2
.plus2048
	+MLittleEndian24Bit 2048

TestInterface_ScrollScreenInput
	+TestForPortBitsLoop_A CIA1KeyboardColumnJoystickA , JoystickBits_Left , .notLeft
TestInterface_ScrollScreenInput_Left
	+MSub24To24ToOut .startOffset , .plus2 , .startOffset
.notLeft
	+TestForPortBitsLoop_A CIA1KeyboardColumnJoystickA , JoystickBits_Right , .notRight
TestInterface_ScrollScreenInput_Right
	+MAdd24To24ToOut .startOffset , .plus2 , .startOffset
.notRight

	+TestForPortBitsLoop_A CIA1KeyboardColumnJoystickA , JoystickBits_Up , .notUp
TestInterface_ScrollScreenInput_Up
	+MSub24To24ToOut .startOffset , .plus2048 , .startOffset
.notUp
	+TestForPortBitsLoop_A CIA1KeyboardColumnJoystickA , JoystickBits_Down , .notDown
TestInterface_ScrollScreenInput_Down
	+MAdd24To24ToOut .startOffset , .plus2048 , .startOffset
.notDown
	rts



Initialise_NoPreserveStack = 1
Initialise_NoIRQServiceRoutine = 1
Initialise_NoMACROWaitForTheLastScan = 1
!source "C64/stdlib/Initialise.a"
!source "BombJack/stdlib/Bus24Bit.a"
!source "BombJack/stdlib/Bus20To32Bit1.a"
!source "BombJack/stdlib/Video.a"
!source "BombJack/stdlib/HardwareTest.a"
!source "BombJack/stdlib/APU_Macros.a"
!source "BombJack/stdlib/APU.a"

